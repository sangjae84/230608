# 숫자 계산
from builtins import input, print

## 정수 계산

### 사칙연산
# 덧셈
print(1 + 1)
print(1 + 2)
print(1 + 2 +3)
#+: 덧셈 연산자
# 뺼셈 (-)
print(5 - 1)
print(3 - 10)
# 곱셈
print(2 * 3)
print(2 * 4 * 5)
# 나누기(/)
print(4 / 2)
print(5 / 2) # 2.5 -> 소수점이 붙은 수로 '변환'이 되었다(실수)
print(type(2 * 2))
print(type(2 / 2))

# 파이썬에서는 정수끼리 나눗셈 계산을 하더라도, 실수값을 반환하다
# 몫 : 나머지 없이, 나눗셈을 했을ㄷ 떄 정수로 딱 떨어지는 값
# 몫 연산자(//) - c계열 언어에서의 주석 표시
'''
- 정수끼리 나눗셈 결과가 실수가 아니라 정수로 나오게 해야할 때 (나머지를 배제해야할 떄
- //로 나눗셈을 하시면 됨
- //는 버림 나눗셈(floor division)
'''
print(5 // 2,type(5 // 2)) # 2 <class 'int'>
'''
- 참고로 실수에 // 연산자를 사용하면 결과는 실수가 나오지만 소수점 이하는 버림
- 따라서 (연산자 앞 뒤 숫자 중에 하나라도 실수라면) 결과는 항상.0으로 끝남
'''
print(5.5 // 2)

# 나머지 연산자(%)
# 모듈로(modulo) 연산자 (모듈러스?)
print(5 % 2)

# 거듭제곱 연산자 (**)
print(2 ** 10, 2 ** 5, 3 ** 0.5)

# 값을 정수로 만들기(소수점 없애기)
'''
* 계산결과가 실수(소수점 있이)로 나왔을 경우에, 강제로 정수로 만들어야할 때는,
* int에 괄호를 붙이고, 숫자 또는 계산식을 넣으면 됨.
* 특히 int(...)에 문자열을 넣어도 정수로 만들 수 있음. 단, 정수로 된 문자열 
int(숫자)
int(계산식) ex) int(5/2)
int(문자열) ex) int("1.1"), int("5")
'''
print(3.3 , type(3.3), int(3.3), type(int(3.3)))
print(int(137/29)) # 몫 연산자와 같은 작용
print("5",int("5"))

# 몫과 나머지 함께 구하기
print(5 / 2)
print(5 // 2, 5 % 2)
print(divmod(5,2))

# 실수 계산
## 실수끼리의 계산(실수라고 해서 별도의 연산자를 쓰진 않아요)
## 계산하는 대상(피연산자) 중에 하나라도 실수가 들어간다면 무조건 실수처리(.붙는다)

## 실수끼리의 덧셈
print(3.5 + 2.1) # 둘 중의 하나가 실수라면
print(3 + 2.1) # 5.1
print(3.5 + 2) # 5.5
# 코딩을 배울 때 값을 예측하는 습관 -> 처음에는 내가 예측하는 값이 틀림
# -> (익숙해지면) 내가 코딩한 내용이 틀려서 -> 결과값이 다르게 나옴(디버깅)

## 실수까리의 뺼셈
print(4.3 - 2.7) # 부동 소수점
print(2.7 - 1.5)
# 컴퓨터는 0,1로 모든 값을 기억한다 - > 2의 배수의 값만 표시 가능
# 10 -> 1010 / 소수점으로 내려가게 되면 - > 더 복잡한 형태로 표시
# 소수점 미만의 작은 오차가 생김 -> 부동소수점.

## 실수끼리의 곱셈
print(1.5 * 3.1)

## 실수끼리의 나눗셈
print(5.5 / 3.1)

## 실수와 정수 간의 계산
# - 실수와 정수를 함께하면, 표현 범위가 넓은 실수로 계산됨(.)
print(4.2 + 5 + 2) # 순서 상관없음. 1개 이상이 실수면 실수임.

# 값을 실수로 만들기(float)
'''
- float에 괄호를 붙이고 숫자 또는 계산식을 넣으면 반환(float(...))
- 특히 float에 '문자열'을 넣어도 싱수로 만들 수 있음
- 단, 실수 또는 정수로 된 문자열
float(숫자),float(계산식),float('문자열')
'''

print(
    float(5),float(1 + 2),float('5')
)




















